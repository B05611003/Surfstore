package surfstore

import (
	context "context"
	"fmt"
	"math"
	"sync"
	"time"

	"google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

var muServerGet sync.Mutex

const debug = 1

type CommitEntry struct {
	// Command is the client command being committed.
	Command interface{}

	// Index is the log index at which the client command is committed.
	Index int

	// Term is the Raft term at which the client command is committed.
	Term int
}

type RaftSurfstore struct {
	lock     sync.Mutex
	isLeader bool
	term     int64
	log      []*UpdateOperation

	metaStore *MetaStore

	ip       string
	ipList   []string
	serverId int64

	commitIndex    int64
	lastApplied    int64
	pendingCommits []chan bool

	isLeaderMutex *sync.RWMutex
	isLeaderCond  *sync.Cond

	commitChan         chan<- CommitEntry
	newCommitReadyChan chan struct{}
	triggerAEChan      chan struct{}

	nextIndex  map[int]int
	matchIndex map[int]int

	/*--------------- Chaos Monkey --------------*/
	isCrashed      bool
	isCrashedMutex *sync.RWMutex
	notCrashedCond *sync.Cond

	UnimplementedRaftSurfstoreServer
}

/*
	If the node is the leader, and if a majority of the nodes are working, should return the correct answer;
	If a majority of the nodes are crashed, should block until a majority recover.
	If not the leader, should indicate an error back to the client
*/
func (s *RaftSurfstore) GetFileInfoMap(ctx context.Context, empty *emptypb.Empty) (*FileInfoMap, error) {
	s.isLeaderMutex.Lock()
	defer s.isLeaderMutex.Unlock()
	if !s.isLeader {
		return &FileInfoMap{FileInfoMap: s.metaStore.FileMetaMap}, ERR_NOT_LEADER
	}
	s.countAlive()
	return &FileInfoMap{FileInfoMap: s.metaStore.FileMetaMap}, nil
}
func (s *RaftSurfstore) countAlive() {
	count := 0
	for count < len(s.ipList)/2 {
		count = 0
		for _, addr := range s.ipList {
			conn, err := grpc.Dial(addr, grpc.WithInsecure())
			if err != nil {
				return
			}
			client := NewRaftSurfstoreClient(conn)
			ctx, cancel := context.WithTimeout(context.Background(), time.Second)
			in := new(emptypb.Empty)
			defer cancel()
			if state, err := client.IsCrashed(ctx, in); !state.IsCrashed && err == nil {
				count++
			}
		}
	}
	return
}

func (s *RaftSurfstore) GetBlockStoreAddr(ctx context.Context, empty *emptypb.Empty) (*BlockStoreAddr, error) {
	muServerGet.Lock()
	defer muServerGet.Unlock()
	// fmt.Printf("serverID:%d, isLeader:%v \n", s.serverId, s.isLeader)
	if !s.isLeader {
		return &BlockStoreAddr{Addr: s.metaStore.BlockStoreAddr}, ERR_NOT_LEADER
	}
	s.countAlive()
	return &BlockStoreAddr{Addr: s.metaStore.BlockStoreAddr}, nil
}

// equal the submit command
func (s *RaftSurfstore) UpdateFile(ctx context.Context, filemeta *FileMetaData) (*Version, error) {
	if !s.isLeader {
		return nil, ERR_NOT_LEADER
	}
	op := UpdateOperation{
		Term:         s.term,
		FileMetaData: filemeta,
	}

	s.log = append(s.log, &op)
	// s.triggerAEChan <- struct{}{}
	// commited := make(chan bool)
	// s.pendingCommits = append(s.pendingCommits, commited)
	// go s.AttemptCommit()
	// success := <-commited
	// fmt.Println("finish commit")
	// if success {
	// 	return s.metaStore.UpdateFile(ctx, filemeta)
	// }
	return s.metaStore.UpdateFile(ctx, filemeta)
}

// Aux function
// Commit the entry to other follers and count if majority of them reply success
// break if commit success
func (s *RaftSurfstore) AttemptCommit() bool {
	// the index to commit
	targetId := s.commitIndex + 1
	commitChan := make(chan *AppendEntryOutput, len(s.ipList))
	for i := range s.ipList {
		go s.CommitEntry(int64(i), targetId, commitChan)
	}

	commitCount := 1
	// TODO end try
	for {
		// TODO handle crashed
		commit := <-commitChan
		if commit != nil && commit.Success {
			commitCount++
		}
		fmt.Printf("count:%d\n", commitCount)
		if commitCount > len(s.ipList)/2 {
			s.pendingCommits[targetId] <- true
			s.commitIndex = targetId
			fmt.Printf("s.commit=%d\n", targetId)
			break
		}
	}
	return true
}

// Aux function
// connect to the server and try to get the reply if they append the entry
func (s *RaftSurfstore) CommitEntry(serverId, entryId int64, commitChan chan *AppendEntryOutput) {
	for {
		addr := s.ipList[serverId]
		conn, err := grpc.Dial(addr, grpc.WithInsecure())
		if err != nil {
			return
		}
		client := NewRaftSurfstoreClient(conn)

		input := &AppendEntryInput{
			Term:         s.term,
			PrevLogIndex: -1,
			PrevLogTerm:  -1,
			Entries:      s.log[entryId : entryId+1],
			LeaderCommit: s.commitIndex,
		}
		if entryId > 0 {
			input.PrevLogIndex = entryId - 1
			input.PrevLogTerm = s.log[entryId-1].Term
		}

		ctx, cancel := context.WithTimeout(context.Background(), time.Second)
		defer cancel()

		output, err := client.AppendEntries(ctx, input)
		if output.Success {
			commitChan <- output
			return
		} else {
			commitChan <- output
			return
		}
		// TODO update state s.nextIndex

		// TODO handle crashed server
	}
}

//1. Reply false if term < currentTerm (§5.1)
//2. Reply false if log doesn’t contain an entry at prevLogIndex whose term
//matches prevLogTerm (§5.3)
//3. If an existing entry conflicts with a new one (same index but different
//terms), delete the existing entry and all that follow it (§5.3)
//4. Append any new entries not already in the log
//5. If leaderCommit > commitIndex, set commitIndex = min(leaderCommit, index
//of last new entry)
func (s *RaftSurfstore) AppendEntries(ctx context.Context, input *AppendEntryInput) (*AppendEntryOutput, error) {
	s.lock.Lock()
	defer s.lock.Unlock()

	output := &AppendEntryOutput{
		Success:      false,
		MatchedIndex: -1,
	}
	if s.term > input.Term {
		return output, fmt.Errorf("old term\n")
	}
	if s.isCrashed {
		return output, fmt.Errorf("server is crashed\n")
	}

	if input.Term > s.term {
		//fmt.Printf("Server %d get higher term: %d\n", s.serverId, input.Term)
		s.term = input.Term
		if s.isLeader {
			s.isLeaderMutex.Lock()
			s.isLeader = false
			s.isLeaderMutex.Unlock()
		}
	}
	s.dlog("AppendEntries: %+v\n", input)
	if input.Term == s.term {
		if input.PrevLogIndex == -1 ||
			(input.PrevLogIndex < int64(len(s.log)) && input.PrevLogTerm == s.log[input.PrevLogIndex].Term) {
			output.Success = true
			logInsertIndex := input.PrevLogIndex + 1
			newEntriesIndex := 0
			for {
				if logInsertIndex >= int64(len(s.log)) || newEntriesIndex >= len(input.Entries) {
					break
				}
				if s.log[logInsertIndex].Term != input.Entries[newEntriesIndex].Term {
					break
				}
				logInsertIndex++
				newEntriesIndex++
			}
			s.dlog("logInsertIndex:%d,len(input.Entries):%d\n", logInsertIndex, len(input.Entries))
			//4. Append any new entries not already in the log
			if newEntriesIndex < len(input.Entries) {
				s.dlog("... inserting entries %v from index %d\n", input.Entries[newEntriesIndex:], logInsertIndex)
				s.log = append(s.log[:logInsertIndex], input.Entries[newEntriesIndex:]...)
			}
			//5. If leaderCommit > commitIndex, set commitIndex = min(leaderCommit, index
			//of last new entry)
			if input.LeaderCommit > s.commitIndex {
				s.dlog("... setting commitIndex=%d\n", s.commitIndex)
				s.commitIndex = int64(math.Min(float64(input.LeaderCommit), float64(len(s.log)-1)))
				s.newCommitReadyChan <- struct{}{}
			}
		}
		output.Term = s.term
	}
	// // if len(input.Entries) == 0 {
	// // 	output.Success = true
	// // 	return output, nil
	// // }
	// //4. Append any new entries not already in the log
	// if !s.isLeader && len(input.Entries) != 0 {
	// 	s.log = append(s.log, input.Entries...)
	// }
	// //5. If leaderCommit > commitIndex, set commitIndex = min(leaderCommit, index
	// //of last new entry)

	// s.commitIndex = int64(math.Min(float64(input.LeaderCommit), float64(len(s.log)-1)))
	// fmt.Printf("input.LeaderCommit:%d lastApplied:%d, commitIndex:%d", input.LeaderCommit, s.lastApplied, s.commitIndex)
	// for s.lastApplied < s.commitIndex {

	// 	s.lastApplied++
	// 	entry := s.log[s.lastApplied]
	// 	s.metaStore.UpdateFile(ctx, entry.FileMetaData)
	// }
	// output.Success = true

	return output, nil
}

// This should set the leader status and any related variables as if the node has just won an election
// Raft determines which of two logs is more up-to-date
// by comparing the index and term of the last entries in the logs.
// If the logs have last entries with different terms, then
// the log with the later term is more up-to-date. If the logs
// end with the same term, then whichever log is longer is
// more up-to-date.
func (s *RaftSurfstore) SetLeader(ctx context.Context, _ *emptypb.Empty) (*Success, error) {

	if s.isCrashed {
		return &Success{Flag: false}, ERR_SERVER_CRASHED
	}
	fmt.Printf("server%d is now leader\n", s.serverId)
	for i := range s.ipList {
		s.nextIndex[i] = len(s.log)
		s.matchIndex[i] = -1
	}
	s.term++
	s.isLeader = true
	s.SendHeartbeat(ctx, &emptypb.Empty{})
	return &Success{Flag: true}, nil
}

// Send a 'Heartbeat" (AppendEntries with no log entries) to the other servers
// Only leaders send heartbeats, if the node is not the leader you can return Success = false
func (s *RaftSurfstore) SendHeartbeat(ctx context.Context, _ *emptypb.Empty) (*Success, error) {
	if !s.isLeader {
		return &Success{Flag: false}, nil
	}
	s.lock.Lock()
	savedCurrentTerm := s.term
	s.lock.Unlock()

	for i, addr := range s.ipList {
		go func(peerId int, addr string) {
			s.lock.Lock()
			ni := s.nextIndex[peerId]
			prevLogIndex := ni - 1
			prevLogTerm := -1
			if prevLogIndex >= 0 {
				prevLogTerm = int(s.log[prevLogIndex].Term)
			}
			entries := s.log[ni:]

			input := &AppendEntryInput{
				Term:         savedCurrentTerm,
				PrevLogIndex: int64(prevLogIndex),
				PrevLogTerm:  int64(prevLogTerm),
				Entries:      entries,
				LeaderCommit: s.commitIndex,
			}
			s.lock.Unlock()

			conn, err := grpc.Dial(addr, grpc.WithInsecure())
			if err != nil {
				fmt.Println(err)
				return
			}
			client := NewRaftSurfstoreClient(conn)
			ctx, cancel := context.WithTimeout(context.Background(), time.Second)
			defer cancel()

			output, err := client.AppendEntries(ctx, input)
			s.lock.Lock()
			defer s.lock.Unlock()
			if output.Term > savedCurrentTerm {
				s.term = input.Term
				if s.isLeader {
					s.isLeaderMutex.Lock()
					s.isLeader = false
					s.isLeaderMutex.Unlock()
				}
				return
			}

			if s.isLeader && savedCurrentTerm == output.Term {
				if output.Success {
					s.nextIndex[peerId] = ni + len(entries)
					s.matchIndex[peerId] = s.nextIndex[peerId] - 1

					savedCommitIndex := s.commitIndex
					for i := int(s.commitIndex + 1); i < len(s.log); i++ {
						if s.log[i].Term == s.term {
							matchCount := 1
							for j := range s.ipList {
								if s.matchIndex[j] >= i {
									matchCount++
								}
							}
							if matchCount*2 > len(s.ipList)+1 {
								s.commitIndex = int64(i)
							}
						}
					}
					if s.commitIndex != savedCommitIndex {
						s.newCommitReadyChan <- struct{}{}
					}
				} else {
					s.nextIndex[peerId] = ni - 1
				}
			}
		}(i, addr)
	}
	// for idx, addr := range s.ipList {
	// 	fmt.Println(addr)
	// 	if int64(idx) == s.serverId {
	// 		continue
	// 	}
	// 	fmt.Printf("Server%d sent heartbeat to %s\n", s.serverId, addr)
	// 	conn, err := grpc.Dial(addr, grpc.WithInsecure())
	// 	if err != nil {
	// 		fmt.Println(err)
	// 		return nil, err
	// 	}
	// 	client := NewRaftSurfstoreClient(conn)
	// 	// TODO
	// 	input := &AppendEntryInput{
	// 		Term:         s.term,
	// 		PrevLogIndex: -1,
	// 		PrevLogTerm:  -1,
	// 		Entries:      make([]*UpdateOperation, 0),
	// 		LeaderCommit: s.commitIndex,
	// 	}

	// 	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	// 	defer cancel()

	// 	output, err := client.AppendEntries(ctx, input)
	// 	if err != nil || output.Success == false {
	// 		fmt.Println("some thing went wrong!!")
	// 		return nil, nil
	// 	}
	// 	// if output != nil {
	// 	// 	return &Success{
	// 	// 		Flag: true,
	// 	// 	}, nil
	// 	// }
	// 	// TODO update state s.nextIndex

	// 	// TODO handle crashed server
	// }

	return &Success{Flag: true}, nil
}

func (s *RaftSurfstore) commitChanSender() {
	for range s.newCommitReadyChan {
		// Find which entries we have to apply.
		s.lock.Lock()
		savedTerm := s.term
		savedLastApplied := s.lastApplied
		var entries []*UpdateOperation
		if s.commitIndex > s.lastApplied {
			entries = s.log[s.lastApplied+1 : s.commitIndex+1]
			s.lastApplied = s.commitIndex
		}
		s.lock.Unlock()

		for i, entry := range entries {
			s.commitChan <- CommitEntry{
				Command: entry.FileMetaData,
				Index:   int(savedLastApplied) + i + 1,
				Term:    int(savedTerm),
			}
			s.dlog("here\n")
			// s.metaStore.UpdateFile(ctx, entry.FileMetaData)
		}
	}
}

// DO NOT EDIT
func (s *RaftSurfstore) Crash(ctx context.Context, _ *emptypb.Empty) (*Success, error) {
	s.isCrashedMutex.Lock()
	s.isCrashed = true
	s.isCrashedMutex.Unlock()

	return &Success{Flag: true}, nil
}

// DO NOT EDIT
func (s *RaftSurfstore) Restore(ctx context.Context, _ *emptypb.Empty) (*Success, error) {
	s.isCrashedMutex.Lock()
	s.isCrashed = false
	s.notCrashedCond.Broadcast()
	s.isCrashedMutex.Unlock()

	return &Success{Flag: true}, nil
}

// DO NOT EDIT
func (s *RaftSurfstore) IsCrashed(ctx context.Context, _ *emptypb.Empty) (*CrashedState, error) {
	return &CrashedState{IsCrashed: s.isCrashed}, nil
}

// DO NOT EDIT
func (s *RaftSurfstore) GetInternalState(ctx context.Context, empty *emptypb.Empty) (*RaftInternalState, error) {
	fileInfoMap, _ := s.metaStore.GetFileInfoMap(ctx, empty)
	return &RaftInternalState{
		IsLeader: s.isLeader,
		Term:     s.term,
		Log:      s.log,
		MetaMap:  fileInfoMap,
	}, nil
}

func (s *RaftSurfstore) dlog(format string, args ...interface{}) {
	if debug > 0 {
		format = fmt.Sprintf("[%d] ", s.serverId) + format
		fmt.Printf(format, args...)
	}
}

var _ RaftSurfstoreInterface = new(RaftSurfstore)
